// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./prisma/generated/client" // Specify a custom output path here
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // The connection URL for your NeonDB
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  password    String?
  name        String?
  role        Role     @default(JOB_SEEKER)
  preferences Json?
  createdAt   DateTime @default(now())

  resumes       Resume[] // Relation to Resume model
  jobs          Job[]          @relation("EmployerJobs")
  applications  Application[]
  notifications Notification[]
  shortlists    Shortlist[] // Add reverse relation for Shortlist
}

model Resume {
  id         Int      @id @default(autoincrement())
  userId     Int
  fileUrl    String
  parsedData Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Employer {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  company   String?
  createdAt DateTime @default(now())
  jobs      Job[]
}

model Job {
  id          Int      @id @default(autoincrement())
  salary      String   @default("salary to be updated")
  type        String   @default("type not mentioned")
  employerId  Int
  title       String
  company     String
  location    String
  description String
  experience  String
  postedAt    DateTime @default(now())

  employer     Employer      @relation(fields: [employerId], references: [id])
  applications Application[]
  skills       Skill[]
  users        User[]        @relation("EmployerJobs")
  shortlists   Shortlist[] // Add reverse relation for Shortlist
}

model Skill {
  id    Int    @id @default(autoincrement())
  name  String
  job   Job    @relation(fields: [jobId], references: [id])
  jobId Int
}

model Shortlist {
  id        Int               @id @default(autoincrement())
  userId    Int
  jobId     Int
  status    ApplicationStatus @default(PENDING)
  createdAt DateTime          @default(now())

  user User @relation(fields: [userId], references: [id])
  job  Job  @relation(fields: [jobId], references: [id])
}

model Application {
  id        Int               @id @default(autoincrement())
  userId    Int
  jobId     Int
  status    ApplicationStatus @default(PENDING)
  appliedAt DateTime          @default(now())

  user User @relation(fields: [userId], references: [id])
  job  Job  @relation(fields: [jobId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

enum Role {
  JOB_SEEKER
  EMPLOYER
}

enum ApplicationStatus {
  PENDING
  SHORTLISTED
  SELECTED
  REJECTED
}
